#! /usr/bin/env python3

import subprocess

from get_offsets import get_offsets

LIBPATH = "./libmbedtls.so.8"
OFFSET_HEADERFILE = "./attack_offsets.h"

def execute_cmd(s):
    return subprocess.check_output(s, shell=True, timeout=10).decode()


def generate_headerfile(headerfname, mpi_exp_mod_offset, one_offset):
    template = """// generated by build.py
#ifndef ATTACK_OFFSETS_H
#define ATTACK_OFFSETS_H

#define MPI_EXP_MOD_OFFSET 0x{mpi_offset:x}
#define ONE_OFFSET 0x{one_offset:x}

#endif /* !ATTACK_OFFSETS_H */
"""
    header_content = template.format(mpi_offset=mpi_exp_mod_offset,
                    one_offset=one_offset)

    with open(headerfname, "w") as fd:
        fd.write(header_content)


def build_library():
    execute_cmd("make -C mbedtls")
    

def main():
    # read out actual offsets from the binary and gen
    ctr_drbg_init_offset, mpi_exp_mod_offset, one_offset = get_offsets(LIBPATH)

    # generate header with actual offsets and rebuild library
    generate_headerfile(OFFSET_HEADERFILE, mpi_exp_mod_offset, one_offset)


if __name__ == "__main__":
    main()
